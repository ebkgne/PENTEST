import subprocess,re, keyboard, threading, urllib.request,os, chardet, datetime, random

from datetime import datetime
from urllib.parse import urlparse
# lst = []
# for i in range(200): lst.append(str(i))
# with open("test.txt", 'w') as file: file.write("\n".join(lst))

def get_domain(url):
    return ".".join(urlparse(url).netloc.split(".")[-2:])

class HTTP_Request:
    
    MAX_REQUEST = 20
    z = 0
    MAX_CHANGED = False
    
    url = "https://support.studiosport.fr/" 
    domain = ""
    
    def query(t,z):
        
        start_time = datetime.now()
        command = "curl  --retry 10 --retry-connrefused -w \"\\n%{http_code}:"+str(z)+"\" "
        # command += "https://www.google.com/" 
        # command += "support.studiosport.fr/" 
        command += t.url
        
        results = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

        detected_encoding = chardet.detect(results.stdout)['encoding']
        
        o = results.stdout.decode(detected_encoding).splitlines()
        x = o[-1]
        o = "\n".join(o[:-1])
        
        lst = []
        
        for f in re.findall(r"(link|href|src)\s*=\s*[\"'](\./)?([^(\"')]*)[\"']",o):    
            
            f = f[2]
            fdomain = get_domain(f)
                    
            if len(fdomain) and t.domain != fdomain: continue
            
            path = urlparse(f).path
            if len(path) and path[0] == "/": path = path[1:]
            
            ext = path.split(".")[-1]
            
            if ext == path or ext in ["jpg","css","png","js", "gif","html"]: continue
            
            lst.append(path)
        
    
        for i in set(lst): print(i)
        
        end_time = datetime.now()
        time_difference = (end_time - start_time).total_seconds()
        
        # beyond 5s divide max reqs
        if (time_difference>5 and t.MAX_CHANGED): 
            t.MAX_CHANGED = False
            t.MAX_REQUEST = int(t.MAX_REQUEST*.5)
            print("MAX_REQUEST: "+str(t.MAX_REQUEST))
        z = t.z
        t.z+=1
        print (str(z)+":"+x+":"+str(time_difference) )
        
    threads = [] 
    pending = []

    def add_thread(t, payload):
        
        thread = threading.Thread(target=t.query,args=[payload])
        thread.start()
        t.threads.append(thread)  
    
    def from_list(t, lst):
        
        lst = list(set([str(item).strip() for item in lst]))
        
        i = 0
        t.threads = []
        for p in lst: 
            
            t.add_thread(p)
            
            if i%t.MAX_REQUEST == t.MAX_REQUEST-1 or (len(t.pending)-i<t.MAX_REQUEST and i%t.MAX_REQUEST == (len(t.pending)%t.MAX_REQUEST-1)):    
                
                try: 
                    for thread in t.threads: thread.join()
                    
                except KeyboardInterrupt: os._exit(1)
                
                t.threads.clear()
                
            i+=1
        
    def from_list2(t, lst):
        
        lst = list(set([str(item).strip() for item in lst]))
        
        i = 0
        t.threads = []
        for p in lst: 
            
            t.add_thread(p)
            
            if i%t.MAX_REQUEST == t.MAX_REQUEST-1 or (len(t.pending)-i<t.MAX_REQUEST and i%t.MAX_REQUEST == (len(t.pending)%t.MAX_REQUEST-1)):    
                
                try: 
                    t.MAX_CHANGED = True
                    for thread in t.threads: thread.join()
                    # print("kloook")
                    
                except KeyboardInterrupt: os._exit(1)
                
                t.threads.clear()
                
            i+=1
        

r = HTTP_Request()
r.domain = get_domain(r.url)

r.from_list2(range(1))


        
    
    
    