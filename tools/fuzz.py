path_to_wordlist = "../lists/wordlist.txt" 
path_to_fuzzlist = "../lists/fuzz.txt" 
lower_only=True

def split_word(word):
    o = word.split(".")
    for i in range(len(o)-1): o[i+1] = o[0]+o[i+1]
    return o

def get_casings(words,lower_only):
    
    if words[0].isnumeric(): lower_only = True

    #foobar
    o = ["".join(words)]
    
    if len(words) > 1: 
        
        # foo_bar
        o.append("_".join(words))
        
        # fooBar
        if not lower_only and not words[1].isnumeric() and len(words) > 1: o.append(words[0] + words[1].capitalize())
    
    if lower_only: return o
        
    #FooBar
    FooBar = words[0].capitalize();
    if len(words) > 1: FooBar+= words[1].capitalize()
    o.append(FooBar)

    #FOOBAR
    if len(words[0]) > 1: o.append("".join(words).upper())
    
    #FOO_BAR
    if len(words) > 1: o.append("_".join(words).upper())
     
    return o

if __name__ == '__main__':
    
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-w', help='extra word')
    parser.add_argument('-i', '--inputfile', help='input file')
    parser.add_argument('-o', '--outputfile', help='output file')
    parser.add_argument('-U', '--uppercase', action='store_true', help='uppercase too')
    args = parser.parse_args()
    if args.uppercase: lower_only=False
    if args.inputfile: path_to_wordlist = args.inputfile
    if args.outputfile: path_to_fuzzlist = args.outputfile
    
    lines = []
    with open(path_to_wordlist+"", 'r') as file: 
        for line in file: lines.append(line)
    sorted_lines = sorted(list(set(lines)),key=str.lower)
    if lines != sorted_lines:
        lines = sorted(list(set(lines)),key=str.lower)
        if input("save sorted wordlist ? (y/n)").lower() == "y":
            with open(path_to_wordlist, 'w') as file: file.write("".join(lines))

    for i in range(8): lines.append(str(i+2016))
    output = []

    for line in lines:      
        w = line.strip().lower().split("_")
        base = split_word(w[0])

        if args.w: 
            w.append(args.w)
        
        for e in base: 
            for x in get_casings([e],lower_only):
                output.append(x)
        
        if len(w)>1:  
            for i in range(len(w)-1):
                for e in base: 
                    
                    extra = split_word(w[i+1])
                    for f in extra:
                        for x in get_casings([e,f],lower_only):
                            output.append(x)


    for c in "azertyuiopqsdfghjklmwxcvbn": 
        for x in get_casings(c,lower_only):
            output.append(x)
            
    for i in range(101): output.append(str(i))

    with open(path_to_fuzzlist, 'w') as file: file.write("\n".join(output))

    print(output)
    print("count: "+str(len(output)))